package com.ityu;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class EstateRegistry extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_initialize = "initialize";

    public static final String FUNC_UPDATEMANAGER = "updateManager";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_LANDIDESTATE = "landIdEstate";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_GETFINGERPRINT = "getFingerprint";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_UNREGISTERBALANCE = "unregisterBalance";

    public static final String FUNC_SETLANDUPDATEOPERATOR = "setLandUpdateOperator";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_UPDATELANDDATA = "updateLandData";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_ESTATELANDBALANCE = "estateLandBalance";

    public static final String FUNC_ESTATELANDIDS = "estateLandIds";

    public static final String FUNC_SETMANYLANDUPDATEOPERATOR = "setManyLandUpdateOperator";

    public static final String FUNC_TRANSFERMANYLANDS = "transferManyLands";

    public static final String FUNC_UPDATEMANYLANDDATA = "updateManyLandData";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETESTATELANDBALANCETOKEN = "setEstateLandBalanceToken";

    public static final String FUNC_EXISTS = "exists";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_SETLANDREGISTRY = "setLANDRegistry";

    public static final String FUNC_UPDATEMETADATA = "updateMetadata";

    public static final String FUNC_PING = "ping";

    public static final String FUNC_REGISTEREDBALANCE = "registeredBalance";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_ISUPDATEAUTHORIZED = "isUpdateAuthorized";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_SETMANYUPDATEOPERATOR = "setManyUpdateOperator";

    public static final String FUNC_safeTransferManyFrom = "safeTransferManyFrom";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_VERIFYFINGERPRINT = "verifyFingerprint";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_UPDATEOPERATOR = "updateOperator";

    public static final String FUNC_ESTATELANDINDEX = "estateLandIndex";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_TRANSFERLAND = "transferLand";

    public static final String FUNC_GETMETADATA = "getMetadata";

    public static final String FUNC_SETUPDATEOPERATOR = "setUpdateOperator";

    public static final String FUNC_GETLANDESTATEID = "getLandEstateId";

    public static final String FUNC_ISMIGRATED = "isMigrated";

    public static final String FUNC_REGISTERBALANCE = "registerBalance";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_GETLANDSSIZE = "getLANDsSize";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_SETUPDATEMANAGER = "setUpdateManager";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETESTATESIZE = "getEstateSize";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event CREATEESTATE_EVENT = new Event("CreateEstate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ADDLAND_EVENT = new Event("AddLand", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event REMOVELAND_EVENT = new Event("RemoveLand", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event UPDATE_EVENT = new Event("Update", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATEOPERATOR_EVENT = new Event("UpdateOperator", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event UPDATEMANAGER_EVENT = new Event("UpdateManager", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETLANDREGISTRY_EVENT = new Event("SetLANDRegistry", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event SETESTATELANDBALANCETOKEN_EVENT = new Event("SetEstateLandBalanceToken", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MIGRATED_EVENT = new Event("Migrated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected EstateRegistry(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected EstateRegistry(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected EstateRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected EstateRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Bool> supportsInterface(Bytes4 _interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(_interfaceId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(Utf8String _name, Utf8String _symbol, Address _registry) {
        final Function function = new Function(
                FUNC_initialize, 
                Arrays.<Type>asList(_name, _symbol, _registry), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> updateManager(Address param0, Address param1) {
        final Function function = new Function(FUNC_UPDATEMANAGER, 
                Arrays.<Type>asList(param0, param1), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> getApproved(Uint256 _tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(_tokenId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(Address _to, Uint256 _tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(_to, _tokenId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> landIdEstate(Uint256 param0) {
        final Function function = new Function(FUNC_LANDIDESTATE, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(Address _operator, Address _from, Uint256 _tokenId, DynamicBytes _data) {
        final Function function = new Function(
                FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(_operator, _from, _tokenId, _data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bytes32> getFingerprint(Uint256 estateId) {
        final Function function = new Function(FUNC_GETFINGERPRINT, 
                Arrays.<Type>asList(estateId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unregisterBalance() {
        final Function function = new Function(
                FUNC_UNREGISTERBALANCE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLandUpdateOperator(Uint256 estateId, Uint256 landId, Address operator) {
        final Function function = new Function(
                FUNC_SETLANDUPDATEOPERATOR, 
                Arrays.<Type>asList(estateId, landId, operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(Address _from, Address _to, Uint256 _tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(_from, _to, _tokenId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateLandData(Uint256 estateId, Uint256 landId, Utf8String data) {
        final Function function = new Function(
                FUNC_UPDATELANDDATA, 
                Arrays.<Type>asList(estateId, landId, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> tokenOfOwnerByIndex(Address _owner, Uint256 _index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(_owner, _index), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> estateLandBalance() {
        final Function function = new Function(FUNC_ESTATELANDBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> estateLandIds(Uint256 param0, Uint256 param1) {
        final Function function = new Function(FUNC_ESTATELANDIDS, 
                Arrays.<Type>asList(param0, param1), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setManyLandUpdateOperator(Uint256 _estateId, DynamicArray<Uint256> _landIds, Address _operator) {
        final Function function = new Function(
                FUNC_SETMANYLANDUPDATEOPERATOR, 
                Arrays.<Type>asList(_estateId, _landIds, _operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferManyLands(Uint256 estateId, DynamicArray<Uint256> landIds, Address destinatary) {
        final Function function = new Function(
                FUNC_TRANSFERMANYLANDS, 
                Arrays.<Type>asList(estateId, landIds, destinatary), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateManyLandData(Uint256 estateId, DynamicArray<Uint256> landIds, Utf8String data) {
        final Function function = new Function(
                FUNC_UPDATEMANYLANDDATA, 
                Arrays.<Type>asList(estateId, landIds, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(Address _from, Address _to, Uint256 _tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(_from, _to, _tokenId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setEstateLandBalanceToken() {
        final Function function = new Function(
                FUNC_SETESTATELANDBALANCETOKEN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(Utf8String _name, Utf8String _symbol) {
        final Function function = new Function(
                FUNC_initialize, 
                Arrays.<Type>asList(_name, _symbol), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> exists(Uint256 _tokenId) {
        final Function function = new Function(FUNC_EXISTS, 
                Arrays.<Type>asList(_tokenId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> tokenByIndex(Uint256 _index) {
        final Function function = new Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(_index), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLANDRegistry(Address _registry) {
        final Function function = new Function(
                FUNC_SETLANDREGISTRY, 
                Arrays.<Type>asList(_registry), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateMetadata(Uint256 estateId, Utf8String metadata) {
        final Function function = new Function(
                FUNC_UPDATEMETADATA, 
                Arrays.<Type>asList(estateId, metadata), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> ping() {
        final Function function = new Function(
                FUNC_PING, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> registeredBalance(Address param0) {
        final Function function = new Function(FUNC_REGISTEREDBALANCE, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> ownerOf(Uint256 _tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(_tokenId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isUpdateAuthorized(Address operator, Uint256 estateId) {
        final Function function = new Function(FUNC_ISUPDATEAUTHORIZED, 
                Arrays.<Type>asList(operator, estateId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> balanceOf(Address _owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(_owner), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setManyUpdateOperator(DynamicArray<Uint256> _estateIds, Address _operator) {
        final Function function = new Function(
                FUNC_SETMANYUPDATEOPERATOR, 
                Arrays.<Type>asList(_estateIds, _operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferManyFrom(Address from, Address to, DynamicArray<Uint256> estateIds) {
        final Function function = new Function(
                FUNC_safeTransferManyFrom, 
                Arrays.<Type>asList(from, to, estateIds), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> registry() {
        final Function function = new Function(FUNC_REGISTRY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final Function function = new Function(
                FUNC_initialize, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> verifyFingerprint(Uint256 estateId, DynamicBytes fingerprint) {
        final Function function = new Function(FUNC_VERIFYFINGERPRINT, 
                Arrays.<Type>asList(estateId, fingerprint), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> updateOperator(Uint256 param0) {
        final Function function = new Function(FUNC_UPDATEOPERATOR, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> estateLandIndex(Uint256 param0, Uint256 param1) {
        final Function function = new Function(FUNC_ESTATELANDINDEX, 
                Arrays.<Type>asList(param0, param1), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(Address _to, Bool _approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(_to, _approved), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferLand(Uint256 estateId, Uint256 landId, Address destinatary) {
        final Function function = new Function(
                FUNC_TRANSFERLAND, 
                Arrays.<Type>asList(estateId, landId, destinatary), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Utf8String> getMetadata(Uint256 estateId) {
        final Function function = new Function(FUNC_GETMETADATA, 
                Arrays.<Type>asList(estateId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUpdateOperator(Uint256 estateId, Address operator) {
        final Function function = new Function(
                FUNC_SETUPDATEOPERATOR, 
                Arrays.<Type>asList(estateId, operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(Address _from, Address _to, Uint256 _tokenId, DynamicBytes _data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(_from, _to, _tokenId, _data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> getLandEstateId(Uint256 landId) {
        final Function function = new Function(FUNC_GETLANDESTATEID, 
                Arrays.<Type>asList(landId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isMigrated(Utf8String contractName, Utf8String migrationId) {
        final Function function = new Function(FUNC_ISMIGRATED, 
                Arrays.<Type>asList(contractName, migrationId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerBalance() {
        final Function function = new Function(
                FUNC_REGISTERBALANCE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(Address _sender) {
        final Function function = new Function(
                FUNC_initialize, 
                Arrays.<Type>asList(_sender), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Utf8String> tokenURI(Uint256 _tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(_tokenId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(Address to, Utf8String metadata) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(to, metadata), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> getLANDsSize(Address _owner) {
        final Function function = new Function(FUNC_GETLANDSSIZE, 
                Arrays.<Type>asList(_owner), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferManyFrom(Address from, Address to, DynamicArray<Uint256> estateIds, DynamicBytes data) {
        final Function function = new Function(
                FUNC_safeTransferManyFrom, 
                Arrays.<Type>asList(from, to, estateIds, data), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> isApprovedForAll(Address _owner, Address _operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(_owner, _operator), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUpdateManager(Address _owner, Address _operator, Bool _approved) {
        final Function function = new Function(
                FUNC_SETUPDATEMANAGER, 
                Arrays.<Type>asList(_owner, _operator, _approved), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(Address newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> getEstateSize(Uint256 estateId) {
        final Function function = new Function(FUNC_GETESTATESIZE, 
                Arrays.<Type>asList(estateId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse._tokenId = (Uint256) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse._tokenId = (Uint256) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._approved = (Address) eventValues.getIndexedValues().get(1);
            typedResponse._tokenId = (Uint256) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._approved = (Address) eventValues.getIndexedValues().get(1);
                typedResponse._tokenId = (Uint256) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._operator = (Address) eventValues.getIndexedValues().get(1);
            typedResponse._approved = (Bool) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._operator = (Address) eventValues.getIndexedValues().get(1);
                typedResponse._approved = (Bool) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<CreateEstateEventResponse> getCreateEstateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEESTATE_EVENT, transactionReceipt);
        ArrayList<CreateEstateEventResponse> responses = new ArrayList<CreateEstateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateEstateEventResponse typedResponse = new CreateEstateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._estateId = (Uint256) eventValues.getIndexedValues().get(1);
            typedResponse._data = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateEstateEventResponse> createEstateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateEstateEventResponse>() {
            @Override
            public CreateEstateEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CREATEESTATE_EVENT, log);
                CreateEstateEventResponse typedResponse = new CreateEstateEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._estateId = (Uint256) eventValues.getIndexedValues().get(1);
                typedResponse._data = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<CreateEstateEventResponse> createEstateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEESTATE_EVENT));
        return createEstateEventFlowable(filter);
    }

    public List<AddLandEventResponse> getAddLandEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDLAND_EVENT, transactionReceipt);
        ArrayList<AddLandEventResponse> responses = new ArrayList<AddLandEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddLandEventResponse typedResponse = new AddLandEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._estateId = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse._landId = (Uint256) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddLandEventResponse> addLandEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AddLandEventResponse>() {
            @Override
            public AddLandEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ADDLAND_EVENT, log);
                AddLandEventResponse typedResponse = new AddLandEventResponse();
                typedResponse.log = log;
                typedResponse._estateId = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse._landId = (Uint256) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<AddLandEventResponse> addLandEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDLAND_EVENT));
        return addLandEventFlowable(filter);
    }

    public List<RemoveLandEventResponse> getRemoveLandEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVELAND_EVENT, transactionReceipt);
        ArrayList<RemoveLandEventResponse> responses = new ArrayList<RemoveLandEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveLandEventResponse typedResponse = new RemoveLandEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._estateId = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse._landId = (Uint256) eventValues.getIndexedValues().get(1);
            typedResponse._destinatary = (Address) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RemoveLandEventResponse> removeLandEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RemoveLandEventResponse>() {
            @Override
            public RemoveLandEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REMOVELAND_EVENT, log);
                RemoveLandEventResponse typedResponse = new RemoveLandEventResponse();
                typedResponse.log = log;
                typedResponse._estateId = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse._landId = (Uint256) eventValues.getIndexedValues().get(1);
                typedResponse._destinatary = (Address) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RemoveLandEventResponse> removeLandEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REMOVELAND_EVENT));
        return removeLandEventFlowable(filter);
    }

    public List<UpdateEventResponse> getUpdateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATE_EVENT, transactionReceipt);
        ArrayList<UpdateEventResponse> responses = new ArrayList<UpdateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateEventResponse typedResponse = new UpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._assetId = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse._holder = (Address) eventValues.getIndexedValues().get(1);
            typedResponse._operator = (Address) eventValues.getIndexedValues().get(2);
            typedResponse._data = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateEventResponse> updateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateEventResponse>() {
            @Override
            public UpdateEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATE_EVENT, log);
                UpdateEventResponse typedResponse = new UpdateEventResponse();
                typedResponse.log = log;
                typedResponse._assetId = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse._holder = (Address) eventValues.getIndexedValues().get(1);
                typedResponse._operator = (Address) eventValues.getIndexedValues().get(2);
                typedResponse._data = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateEventResponse> updateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATE_EVENT));
        return updateEventFlowable(filter);
    }

    public List<UpdateOperatorEventResponse> getUpdateOperatorEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEOPERATOR_EVENT, transactionReceipt);
        ArrayList<UpdateOperatorEventResponse> responses = new ArrayList<UpdateOperatorEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateOperatorEventResponse typedResponse = new UpdateOperatorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._estateId = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse._operator = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateOperatorEventResponse> updateOperatorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateOperatorEventResponse>() {
            @Override
            public UpdateOperatorEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEOPERATOR_EVENT, log);
                UpdateOperatorEventResponse typedResponse = new UpdateOperatorEventResponse();
                typedResponse.log = log;
                typedResponse._estateId = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse._operator = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateOperatorEventResponse> updateOperatorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEOPERATOR_EVENT));
        return updateOperatorEventFlowable(filter);
    }

    public List<UpdateManagerEventResponse> getUpdateManagerEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEMANAGER_EVENT, transactionReceipt);
        ArrayList<UpdateManagerEventResponse> responses = new ArrayList<UpdateManagerEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateManagerEventResponse typedResponse = new UpdateManagerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._operator = (Address) eventValues.getIndexedValues().get(1);
            typedResponse._caller = (Address) eventValues.getIndexedValues().get(2);
            typedResponse._approved = (Bool) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateManagerEventResponse> updateManagerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateManagerEventResponse>() {
            @Override
            public UpdateManagerEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEMANAGER_EVENT, log);
                UpdateManagerEventResponse typedResponse = new UpdateManagerEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._operator = (Address) eventValues.getIndexedValues().get(1);
                typedResponse._caller = (Address) eventValues.getIndexedValues().get(2);
                typedResponse._approved = (Bool) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateManagerEventResponse> updateManagerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEMANAGER_EVENT));
        return updateManagerEventFlowable(filter);
    }

    public List<SetLANDRegistryEventResponse> getSetLANDRegistryEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETLANDREGISTRY_EVENT, transactionReceipt);
        ArrayList<SetLANDRegistryEventResponse> responses = new ArrayList<SetLANDRegistryEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetLANDRegistryEventResponse typedResponse = new SetLANDRegistryEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._registry = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetLANDRegistryEventResponse> setLANDRegistryEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetLANDRegistryEventResponse>() {
            @Override
            public SetLANDRegistryEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETLANDREGISTRY_EVENT, log);
                SetLANDRegistryEventResponse typedResponse = new SetLANDRegistryEventResponse();
                typedResponse.log = log;
                typedResponse._registry = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<SetLANDRegistryEventResponse> setLANDRegistryEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETLANDREGISTRY_EVENT));
        return setLANDRegistryEventFlowable(filter);
    }

    public List<SetEstateLandBalanceTokenEventResponse> getSetEstateLandBalanceTokenEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETESTATELANDBALANCETOKEN_EVENT, transactionReceipt);
        ArrayList<SetEstateLandBalanceTokenEventResponse> responses = new ArrayList<SetEstateLandBalanceTokenEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetEstateLandBalanceTokenEventResponse typedResponse = new SetEstateLandBalanceTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._previousEstateLandBalance = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._newEstateLandBalance = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetEstateLandBalanceTokenEventResponse> setEstateLandBalanceTokenEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetEstateLandBalanceTokenEventResponse>() {
            @Override
            public SetEstateLandBalanceTokenEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETESTATELANDBALANCETOKEN_EVENT, log);
                SetEstateLandBalanceTokenEventResponse typedResponse = new SetEstateLandBalanceTokenEventResponse();
                typedResponse.log = log;
                typedResponse._previousEstateLandBalance = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._newEstateLandBalance = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SetEstateLandBalanceTokenEventResponse> setEstateLandBalanceTokenEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETESTATELANDBALANCETOKEN_EVENT));
        return setEstateLandBalanceTokenEventFlowable(filter);
    }

    public List<MigratedEventResponse> getMigratedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MIGRATED_EVENT, transactionReceipt);
        ArrayList<MigratedEventResponse> responses = new ArrayList<MigratedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MigratedEventResponse typedResponse = new MigratedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.contractName = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.migrationId = (Utf8String) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MigratedEventResponse> migratedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MigratedEventResponse>() {
            @Override
            public MigratedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MIGRATED_EVENT, log);
                MigratedEventResponse typedResponse = new MigratedEventResponse();
                typedResponse.log = log;
                typedResponse.contractName = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.migrationId = (Utf8String) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<MigratedEventResponse> migratedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MIGRATED_EVENT));
        return migratedEventFlowable(filter);
    }

    @Deprecated
    public static EstateRegistry load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new EstateRegistry(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static EstateRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new EstateRegistry(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static EstateRegistry load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new EstateRegistry(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static EstateRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new EstateRegistry(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<EstateRegistry> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EstateRegistry.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EstateRegistry> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EstateRegistry.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<EstateRegistry> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EstateRegistry.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EstateRegistry> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EstateRegistry.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public Address _from;

        public Address _to;

        public Uint256 _tokenId;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public Address _owner;

        public Address _approved;

        public Uint256 _tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public Address _owner;

        public Address _operator;

        public Bool _approved;
    }

    public static class CreateEstateEventResponse extends BaseEventResponse {
        public Address _owner;

        public Uint256 _estateId;

        public Utf8String _data;
    }

    public static class AddLandEventResponse extends BaseEventResponse {
        public Uint256 _estateId;

        public Uint256 _landId;
    }

    public static class RemoveLandEventResponse extends BaseEventResponse {
        public Uint256 _estateId;

        public Uint256 _landId;

        public Address _destinatary;
    }

    public static class UpdateEventResponse extends BaseEventResponse {
        public Uint256 _assetId;

        public Address _holder;

        public Address _operator;

        public Utf8String _data;
    }

    public static class UpdateOperatorEventResponse extends BaseEventResponse {
        public Uint256 _estateId;

        public Address _operator;
    }

    public static class UpdateManagerEventResponse extends BaseEventResponse {
        public Address _owner;

        public Address _operator;

        public Address _caller;

        public Bool _approved;
    }

    public static class SetLANDRegistryEventResponse extends BaseEventResponse {
        public Address _registry;
    }

    public static class SetEstateLandBalanceTokenEventResponse extends BaseEventResponse {
        public Address _previousEstateLandBalance;

        public Address _newEstateLandBalance;
    }

    public static class MigratedEventResponse extends BaseEventResponse {
        public Utf8String contractName;

        public Utf8String migrationId;
    }
}
