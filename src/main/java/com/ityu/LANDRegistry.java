package com.ityu;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class LANDRegistry extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_PROXYOWNER = "proxyOwner";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_UPDATEMANAGER = "updateManager";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_OWNEROFLAND = "ownerOfLand";

    public static final String FUNC_SETLATESTTONOW = "setLatestToNow";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_UNREGISTERBALANCE = "unregisterBalance";

    public static final String FUNC_ASSIGNNEWPARCEL = "assignNewParcel";

    public static final String FUNC_OWNEROFLANDMANY = "ownerOfLandMany";

    public static final String FUNC_LATESTPING = "latestPing";

    public static final String FUNC_UPDATEMANYLANDDATA = "updateManyLandData";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_ISAUTHORIZED = "isAuthorized";

    public static final String FUNC_AUTHORIZEDDEPLOY = "authorizedDeploy";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_AUTHORIZEDEPLOY = "authorizeDeploy";

    public static final String FUNC_TRANSFERLAND = "transferLand";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_LANDDATA = "landData";

    public static final String FUNC_TRANSFERMANYLAND = "transferManyLand";

    public static final String FUNC_exists = "exists";

    public static final String FUNC_TOKENSOF = "tokensOf";

    public static final String FUNC_PING = "ping";

    public static final String FUNC_REGISTEREDBALANCE = "registeredBalance";

    public static final String FUNC_SETLANDBALANCETOKEN = "setLandBalanceToken";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_GET_METADATA = "GET_METADATA";

    public static final String FUNC_ISUPDATEAUTHORIZED = "isUpdateAuthorized";

    public static final String FUNC_TOKENMETADATA = "tokenMetadata";

    public static final String FUNC_ENCODETOKENID = "encodeTokenId";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CURRENTCONTRACT = "currentContract";

    public static final String FUNC_SETMANYUPDATEOPERATOR = "setManyUpdateOperator";

    public static final String FUNC_DESCRIPTION = "description";

    public static final String FUNC_DECODETOKENID = "decodeTokenId";

    public static final String FUNC_LANDBALANCE = "landBalance";

    public static final String FUNC_ASSIGNMULTIPLEPARCELS = "assignMultipleParcels";

    public static final String FUNC_CREATEESTATEWITHMETADATA = "createEstateWithMetadata";

    public static final String FUNC_LANDOF = "landOf";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETESTATEREGISTRY = "setEstateRegistry";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_UPDATEOPERATOR = "updateOperator";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETUPDATEOPERATOR = "setUpdateOperator";

    public static final String FUNC_REGISTERBALANCE = "registerBalance";

    public static final String FUNC_CREATEESTATE = "createEstate";

    public static final String FUNC_UPDATELANDDATA = "updateLandData";

    public static final String FUNC_ESTATEREGISTRY = "estateRegistry";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_GETAPPROVEDADDRESS = "getApprovedAddress";

    public static final String FUNC_SETUPDATEMANAGER = "setUpdateManager";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERMANYLANDTOESTATE = "transferManyLandToEstate";

    public static final String FUNC_TRANSFERLANDTOESTATE = "transferLandToEstate";

    public static final String FUNC_FORBIDDEPLOY = "forbidDeploy";

    public static final Event ESTATEREGISTRYSET_EVENT = new Event("EstateRegistrySet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    public static final Event UPDATE_EVENT = new Event("Update",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Utf8String>() {
            }));
    ;

    public static final Event UPDATEOPERATOR_EVENT = new Event("UpdateOperator",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event UPDATEMANAGER_EVENT = new Event("UpdateManager",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));
    ;

    public static final Event DEPLOYAUTHORIZED_EVENT = new Event("DeployAuthorized",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event DEPLOYFORBIDDEN_EVENT = new Event("DeployForbidden",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event SETLANDBALANCETOKEN_EVENT = new Event("SetLandBalanceToken",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }, new TypeReference<Address>() {
            }, new TypeReference<DynamicBytes>() {
            }, new TypeReference<DynamicBytes>() {
            }));
    ;


    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }));
    ;

    public static final Event OWNERUPDATE_EVENT = new Event("OwnerUpdate",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }));
    ;

    @Deprecated
    protected LANDRegistry(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LANDRegistry(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LANDRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LANDRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Bool> supportsInterface(Bytes4 _interfaceID) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(_interfaceID),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> proxyOwner() {
        final Function function = new Function(FUNC_PROXYOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> updateManager(Address param0, Address param1) {
        final Function function = new Function(FUNC_UPDATEMANAGER,
                Arrays.<Type>asList(param0, param1),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> getApproved(Uint256 assetId) {
        final Function function = new Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(assetId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(Address operator, Uint256 assetId) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(operator, assetId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> ownerOfLand(Int256 x, Int256 y) {
        final Function function = new Function(FUNC_OWNEROFLAND,
                Arrays.<Type>asList(x, y),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLatestToNow(Address user) {
        final Function function = new Function(
                FUNC_SETLATESTTONOW,
                Arrays.<Type>asList(user),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unregisterBalance() {
        final Function function = new Function(
                FUNC_UNREGISTERBALANCE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> assignNewParcel(Int256 x, Int256 y, Address beneficiary) {
        final Function function = new Function(
                FUNC_ASSIGNNEWPARCEL,
                Arrays.<Type>asList(x, y, beneficiary),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<DynamicArray<Address>> ownerOfLandMany(DynamicArray<Int256> x, DynamicArray<Int256> y) {
        final Function function = new Function(FUNC_OWNEROFLANDMANY,
                Arrays.<Type>asList(x, y),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> latestPing(Address param0) {
        final Function function = new Function(FUNC_LATESTPING,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateManyLandData(DynamicArray<Int256> x, DynamicArray<Int256> y, Utf8String data) {
        final Function function = new Function(
                FUNC_UPDATEMANYLANDDATA,
                Arrays.<Type>asList(x, y, data),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(Address from, Address to, Uint256 assetId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(from, to, assetId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> isAuthorized(Address operator, Uint256 assetId) {
        final Function function = new Function(FUNC_ISAUTHORIZED,
                Arrays.<Type>asList(operator, assetId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> authorizedDeploy(Address param0) {
        final Function function = new Function(FUNC_AUTHORIZEDDEPLOY,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> tokenOfOwnerByIndex(Address owner, Uint256 index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX,
                Arrays.<Type>asList(owner, index),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> decimals() {
        final Function function = new Function(FUNC_DECIMALS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> authorizeDeploy(Address beneficiary) {
        final Function function = new Function(
                FUNC_AUTHORIZEDEPLOY,
                Arrays.<Type>asList(beneficiary),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferLand(Int256 x, Int256 y, Address to) {
        final Function function = new Function(
                FUNC_TRANSFERLAND,
                Arrays.<Type>asList(x, y, to),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(Address from, Address to, Uint256 assetId) {
        final Function function = new Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(from, to, assetId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(DynamicBytes param0) {
        final Function function = new Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(param0),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Utf8String> landData(Int256 x, Int256 y) {
        final Function function = new Function(FUNC_LANDDATA,
                Arrays.<Type>asList(x, y),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferManyLand(DynamicArray<Int256> x, DynamicArray<Int256> y, Address to) {
        final Function function = new Function(
                FUNC_TRANSFERMANYLAND,
                Arrays.<Type>asList(x, y, to),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> exists(Uint256 assetId) {
        final Function function = new Function(FUNC_exists,
                Arrays.<Type>asList(assetId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<DynamicArray<Uint256>> tokensOf(Address owner) {
        final Function function = new Function(FUNC_TOKENSOF,
                Arrays.<Type>asList(owner),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> ping() {
        final Function function = new Function(
                FUNC_PING,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> registeredBalance(Address param0) {
        final Function function = new Function(FUNC_REGISTEREDBALANCE,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLandBalanceToken(Address _newLandBalance) {
        final Function function = new Function(
                FUNC_SETLANDBALANCETOKEN,
                Arrays.<Type>asList(_newLandBalance),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> ownerOf(Uint256 assetId) {
        final Function function = new Function(FUNC_OWNEROF,
                Arrays.<Type>asList(assetId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes4> GET_METADATA() {
        final Function function = new Function(FUNC_GET_METADATA,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isUpdateAuthorized(Address operator, Uint256 assetId) {
        final Function function = new Function(FUNC_ISUPDATEAUTHORIZED,
                Arrays.<Type>asList(operator, assetId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Utf8String> tokenMetadata(Uint256 assetId) {
        final Function function = new Function(FUNC_TOKENMETADATA,
                Arrays.<Type>asList(assetId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> encodeTokenId(Int256 x, Int256 y) {
        final Function function = new Function(FUNC_ENCODETOKENID,
                Arrays.<Type>asList(x, y),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> balanceOf(Address owner) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(owner),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> currentContract() {
        final Function function = new Function(FUNC_CURRENTCONTRACT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setManyUpdateOperator(DynamicArray<Uint256> _assetIds, Address _operator) {
        final Function function = new Function(
                FUNC_SETMANYUPDATEOPERATOR,
                Arrays.<Type>asList(_assetIds, _operator),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Utf8String> description() {
        final Function function = new Function(FUNC_DESCRIPTION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple2<Int256, Int256>> decodeTokenId(Uint256 value) {
        final Function function = new Function(FUNC_DECODETOKENID,
                Arrays.<Type>asList(value),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }, new TypeReference<Int256>() {
                }));
        return new RemoteFunctionCall<Tuple2<Int256, Int256>>(function,
                new Callable<Tuple2<Int256, Int256>>() {
                    @Override
                    public Tuple2<Int256, Int256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Int256, Int256>(
                                (Int256) results.get(0),
                                (Int256) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<Address> landBalance() {
        final Function function = new Function(FUNC_LANDBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> assignMultipleParcels(DynamicArray<Int256> x, DynamicArray<Int256> y, Address beneficiary) {
        final Function function = new Function(
                FUNC_ASSIGNMULTIPLEPARCELS,
                Arrays.<Type>asList(x, y, beneficiary),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createEstateWithMetadata(DynamicArray<Int256> x, DynamicArray<Int256> y, Address beneficiary, Utf8String metadata) {
        final Function function = new Function(
                FUNC_CREATEESTATEWITHMETADATA,
                Arrays.<Type>asList(x, y, beneficiary, metadata),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<DynamicArray<Int256>, DynamicArray<Int256>>> landOf(Address owner) {
        final Function function = new Function(FUNC_LANDOF,
                Arrays.<Type>asList(owner),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int256>>() {
                }, new TypeReference<DynamicArray<Int256>>() {
                }));
        return new RemoteFunctionCall<Tuple2<DynamicArray<Int256>, DynamicArray<Int256>>>(function,
                new Callable<Tuple2<DynamicArray<Int256>, DynamicArray<Int256>>>() {
                    @Override
                    public Tuple2<DynamicArray<Int256>, DynamicArray<Int256>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Int256>, DynamicArray<Int256>>(
                                (DynamicArray<Int256>) results.get(0),
                                (DynamicArray<Int256>) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setEstateRegistry(Address registry) {
        final Function function = new Function(
                FUNC_SETESTATEREGISTRY,
                Arrays.<Type>asList(registry),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Utf8String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> updateOperator(Uint256 param0) {
        final Function function = new Function(FUNC_UPDATEOPERATOR,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(Address operator, Bool authorized) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(operator, authorized),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> exists(Int256 x, Int256 y) {
        final Function function = new Function(FUNC_exists,
                Arrays.<Type>asList(x, y),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUpdateOperator(Uint256 assetId, Address operator) {
        final Function function = new Function(
                FUNC_SETUPDATEOPERATOR,
                Arrays.<Type>asList(assetId, operator),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(Address from, Address to, Uint256 assetId, DynamicBytes userData) {
        final Function function = new Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(from, to, assetId, userData),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerBalance() {
        final Function function = new Function(
                FUNC_REGISTERBALANCE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createEstate(DynamicArray<Int256> x, DynamicArray<Int256> y, Address beneficiary) {
        final Function function = new Function(
                FUNC_CREATEESTATE,
                Arrays.<Type>asList(x, y, beneficiary),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateLandData(Int256 x, Int256 y, Utf8String data) {
        final Function function = new Function(
                FUNC_UPDATELANDDATA,
                Arrays.<Type>asList(x, y, data),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Address> estateRegistry() {
        final Function function = new Function(FUNC_ESTATEREGISTRY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isApprovedForAll(Address assetHolder, Address operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(assetHolder, operator),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> getApprovedAddress(Uint256 assetId) {
        final Function function = new Function(FUNC_GETAPPROVEDADDRESS,
                Arrays.<Type>asList(assetId),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUpdateManager(Address _owner, Address _operator, Bool _approved) {
        final Function function = new Function(
                FUNC_SETUPDATEMANAGER,
                Arrays.<Type>asList(_owner, _operator, _approved),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(_newOwner),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferManyLandToEstate(DynamicArray<Int256> x, DynamicArray<Int256> y, Uint256 estateId) {
        final Function function = new Function(
                FUNC_TRANSFERMANYLANDTOESTATE,
                Arrays.<Type>asList(x, y, estateId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferLandToEstate(Int256 x, Int256 y, Uint256 estateId) {
        final Function function = new Function(
                FUNC_TRANSFERLANDTOESTATE,
                Arrays.<Type>asList(x, y, estateId),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> forbidDeploy(Address beneficiary) {
        final Function function = new Function(
                FUNC_FORBIDDEPLOY,
                Arrays.<Type>asList(beneficiary),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<EstateRegistrySetEventResponse> getEstateRegistrySetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ESTATEREGISTRYSET_EVENT, transactionReceipt);
        ArrayList<EstateRegistrySetEventResponse> responses = new ArrayList<EstateRegistrySetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EstateRegistrySetEventResponse typedResponse = new EstateRegistrySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.registry = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EstateRegistrySetEventResponse> estateRegistrySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, EstateRegistrySetEventResponse>() {
            @Override
            public EstateRegistrySetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ESTATEREGISTRYSET_EVENT, log);
                EstateRegistrySetEventResponse typedResponse = new EstateRegistrySetEventResponse();
                typedResponse.log = log;
                typedResponse.registry = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<EstateRegistrySetEventResponse> estateRegistrySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ESTATEREGISTRYSET_EVENT));
        return estateRegistrySetEventFlowable(filter);
    }

    public List<UpdateEventResponse> getUpdateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATE_EVENT, transactionReceipt);
        ArrayList<UpdateEventResponse> responses = new ArrayList<UpdateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateEventResponse typedResponse = new UpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.assetId = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse.holder = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(2);
            typedResponse.data = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateEventResponse> updateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateEventResponse>() {
            @Override
            public UpdateEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATE_EVENT, log);
                UpdateEventResponse typedResponse = new UpdateEventResponse();
                typedResponse.log = log;
                typedResponse.assetId = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse.holder = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(2);
                typedResponse.data = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateEventResponse> updateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATE_EVENT));
        return updateEventFlowable(filter);
    }

    public List<UpdateOperatorEventResponse> getUpdateOperatorEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEOPERATOR_EVENT, transactionReceipt);
        ArrayList<UpdateOperatorEventResponse> responses = new ArrayList<UpdateOperatorEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateOperatorEventResponse typedResponse = new UpdateOperatorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.assetId = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateOperatorEventResponse> updateOperatorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateOperatorEventResponse>() {
            @Override
            public UpdateOperatorEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEOPERATOR_EVENT, log);
                UpdateOperatorEventResponse typedResponse = new UpdateOperatorEventResponse();
                typedResponse.log = log;
                typedResponse.assetId = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateOperatorEventResponse> updateOperatorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEOPERATOR_EVENT));
        return updateOperatorEventFlowable(filter);
    }

    public List<UpdateManagerEventResponse> getUpdateManagerEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEMANAGER_EVENT, transactionReceipt);
        ArrayList<UpdateManagerEventResponse> responses = new ArrayList<UpdateManagerEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateManagerEventResponse typedResponse = new UpdateManagerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._operator = (Address) eventValues.getIndexedValues().get(1);
            typedResponse._caller = (Address) eventValues.getIndexedValues().get(2);
            typedResponse._approved = (Bool) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateManagerEventResponse> updateManagerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateManagerEventResponse>() {
            @Override
            public UpdateManagerEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEMANAGER_EVENT, log);
                UpdateManagerEventResponse typedResponse = new UpdateManagerEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._operator = (Address) eventValues.getIndexedValues().get(1);
                typedResponse._caller = (Address) eventValues.getIndexedValues().get(2);
                typedResponse._approved = (Bool) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateManagerEventResponse> updateManagerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEMANAGER_EVENT));
        return updateManagerEventFlowable(filter);
    }

    public List<DeployAuthorizedEventResponse> getDeployAuthorizedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DEPLOYAUTHORIZED_EVENT, transactionReceipt);
        ArrayList<DeployAuthorizedEventResponse> responses = new ArrayList<DeployAuthorizedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeployAuthorizedEventResponse typedResponse = new DeployAuthorizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._caller = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._deployer = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeployAuthorizedEventResponse> deployAuthorizedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DeployAuthorizedEventResponse>() {
            @Override
            public DeployAuthorizedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DEPLOYAUTHORIZED_EVENT, log);
                DeployAuthorizedEventResponse typedResponse = new DeployAuthorizedEventResponse();
                typedResponse.log = log;
                typedResponse._caller = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._deployer = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DeployAuthorizedEventResponse> deployAuthorizedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPLOYAUTHORIZED_EVENT));
        return deployAuthorizedEventFlowable(filter);
    }

    public List<DeployForbiddenEventResponse> getDeployForbiddenEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DEPLOYFORBIDDEN_EVENT, transactionReceipt);
        ArrayList<DeployForbiddenEventResponse> responses = new ArrayList<DeployForbiddenEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DeployForbiddenEventResponse typedResponse = new DeployForbiddenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._caller = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._deployer = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeployForbiddenEventResponse> deployForbiddenEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DeployForbiddenEventResponse>() {
            @Override
            public DeployForbiddenEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DEPLOYFORBIDDEN_EVENT, log);
                DeployForbiddenEventResponse typedResponse = new DeployForbiddenEventResponse();
                typedResponse.log = log;
                typedResponse._caller = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._deployer = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DeployForbiddenEventResponse> deployForbiddenEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPLOYFORBIDDEN_EVENT));
        return deployForbiddenEventFlowable(filter);
    }

    public List<SetLandBalanceTokenEventResponse> getSetLandBalanceTokenEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETLANDBALANCETOKEN_EVENT, transactionReceipt);
        ArrayList<SetLandBalanceTokenEventResponse> responses = new ArrayList<SetLandBalanceTokenEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetLandBalanceTokenEventResponse typedResponse = new SetLandBalanceTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._previousLandBalance = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._newLandBalance = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetLandBalanceTokenEventResponse> setLandBalanceTokenEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetLandBalanceTokenEventResponse>() {
            @Override
            public SetLandBalanceTokenEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETLANDBALANCETOKEN_EVENT, log);
                SetLandBalanceTokenEventResponse typedResponse = new SetLandBalanceTokenEventResponse();
                typedResponse.log = log;
                typedResponse._previousLandBalance = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._newLandBalance = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SetLandBalanceTokenEventResponse> setLandBalanceTokenEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETLANDBALANCETOKEN_EVENT));
        return setLandBalanceTokenEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.assetId = (Uint256) eventValues.getIndexedValues().get(2);
            typedResponse.operator = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.userData = (DynamicBytes) eventValues.getNonIndexedValues().get(1);
            typedResponse.operatorData = (DynamicBytes) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.assetId = (Uint256) eventValues.getIndexedValues().get(2);
                typedResponse.operator = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.userData = (DynamicBytes) eventValues.getNonIndexedValues().get(1);
                typedResponse.operatorData = (DynamicBytes) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }


    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.holder = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.authorized = (Bool) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.holder = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.authorized = (Bool) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.assetId = (Uint256) eventValues.getIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.assetId = (Uint256) eventValues.getIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<OwnerUpdateEventResponse> getOwnerUpdateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERUPDATE_EVENT, transactionReceipt);
        ArrayList<OwnerUpdateEventResponse> responses = new ArrayList<OwnerUpdateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnerUpdateEventResponse typedResponse = new OwnerUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._prevOwner = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse._newOwner = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnerUpdateEventResponse> ownerUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnerUpdateEventResponse>() {
            @Override
            public OwnerUpdateEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERUPDATE_EVENT, log);
                OwnerUpdateEventResponse typedResponse = new OwnerUpdateEventResponse();
                typedResponse.log = log;
                typedResponse._prevOwner = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse._newOwner = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnerUpdateEventResponse> ownerUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERUPDATE_EVENT));
        return ownerUpdateEventFlowable(filter);
    }

    @Deprecated
    public static LANDRegistry load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LANDRegistry(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LANDRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LANDRegistry(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LANDRegistry load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LANDRegistry(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LANDRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LANDRegistry(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<LANDRegistry> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LANDRegistry.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LANDRegistry> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LANDRegistry.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<LANDRegistry> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(LANDRegistry.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<LANDRegistry> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(LANDRegistry.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class EstateRegistrySetEventResponse extends BaseEventResponse {
        public Address registry;
    }

    public static class UpdateEventResponse extends BaseEventResponse {
        public Uint256 assetId;

        public Address holder;

        public Address operator;

        public Utf8String data;
    }

    public static class UpdateOperatorEventResponse extends BaseEventResponse {
        public Uint256 assetId;

        public Address operator;
    }

    public static class UpdateManagerEventResponse extends BaseEventResponse {
        public Address _owner;

        public Address _operator;

        public Address _caller;

        public Bool _approved;
    }

    public static class DeployAuthorizedEventResponse extends BaseEventResponse {
        public Address _caller;

        public Address _deployer;
    }

    public static class DeployForbiddenEventResponse extends BaseEventResponse {
        public Address _caller;

        public Address _deployer;
    }

    public static class SetLandBalanceTokenEventResponse extends BaseEventResponse {
        public Address _previousLandBalance;

        public Address _newLandBalance;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public Address from;

        public Address to;

        public Uint256 assetId;

        public Address operator;

        public DynamicBytes userData;

        public DynamicBytes operatorData;
    }


    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public Address holder;

        public Address operator;

        public Bool authorized;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public Address owner;

        public Address operator;

        public Uint256 assetId;
    }

    public static class OwnerUpdateEventResponse extends BaseEventResponse {
        public Address _prevOwner;

        public Address _newOwner;
    }
}
