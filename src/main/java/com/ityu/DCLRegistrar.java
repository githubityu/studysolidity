package com.ityu;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class DCLRegistrar extends Contract {
    private static final String BINARY = "608060405260006010553480156200001657600080fd5b506040516200515038038062005150833981810160405260a08110156200003c57600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200006857600080fd5b9083019060208201858111156200007e57600080fd5b82516401000000008111828201881017156200009957600080fd5b82525081516020918201929091019080838360005b83811015620000c8578181015183820152602001620000ae565b50505050905090810190601f168015620000f65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011a57600080fd5b9083019060208201858111156200013057600080fd5b82516401000000008111828201881017156200014b57600080fd5b82525081516020918201929091019080838360005b838110156200017a57818101518382015260200162000160565b50505050905090810190601f168015620001a85780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084640100000000821115620001cc57600080fd5b908301906020820185811115620001e257600080fd5b8251640100000000811182820188101715620001fd57600080fd5b82525081516020918201929091019080838360005b838110156200022c57818101518382015260200162000212565b50505050905090810190601f1680156200025a5780820380516001836020036101000a031916815260200191505b5060408181018152600d82526c2221a6102932b3b4b9ba3930b960991b6020808401919091528151808301909252600682526544434c454e5360d01b90820152909350915082905081620002be6301ffc9a760e01b6001600160e01b036200061e16565b620002d96380ac58cd60e01b6001600160e01b036200061e16565b620002f463780e9d6360e01b6001600160e01b036200061e16565b81516200030990600990602085019062000c98565b5080516200031f90600a90602084019062000c98565b506200033b635b5e139f60e01b6001600160e01b036200061e16565b505050506200034f620006a360201b60201c565b600c80546001600160a01b0319166001600160a01b0392831617908190556040519116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620003af856001600160e01b03620006a816565b620003c3846001600160e01b036200080316565b60008351116200041a576040805162461bcd60e51b815260206004820152601b60248201527f546f7020646f6d61696e2063616e206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b82516200042f90601190602086019062000c98565b50600082511162000487576040805162461bcd60e51b815260206004820152601760248201527f446f6d61696e2063616e206e6f7420626520656d707479000000000000000000604482015290519081900360640190fd5b81516200049c90601290602085019062000c98565b5060105460116040516020018082805460018160011615610100020316600290048015620005045780601f10620004e157610100808354040283529182019162000504565b820191906000526020600020905b815481529060010190602001808311620004ef575b50509150506040516020818303038152906040528051906020012060405160200180838152602001828152602001925050506040516020818303038152906040528051906020012060138190555060135460126040516020018082805460018160011615610100020316600290048015620005b95780601f1062000596576101008083540402835291820191620005b9565b820191906000526020600020905b815481529060010190602001808311620005a4575b505060408051601f198184030181528282528051602091820120818401969096528183019590955280518083038201815260609092019052805193019290922060145550620006139050816001600160e01b036200097316565b505050505062000d3a565b6001600160e01b031980821614156200067e576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b335b90565b620006bb6001600160e01b0362000c2a16565b620006fc576040805162461bcd60e51b8152602060048201819052602482015260008051602062005130833981519152604482015290519081900360640190fd5b600d546001600160a01b03828116911614156200074b5760405162461bcd60e51b8152600401808060200182810382526029815260200180620051076029913960400191505060405180910390fd5b6200076a816001600160a01b031662000c5b60201b62002f9f1760201c565b620007a75760405162461bcd60e51b8152600401808060200182810382526021815260200180620050c16021913960400191505060405180910390fd5b600d546040516001600160a01b038084169216907f482b97c53e48ffa324a976e2738053e9aff6eee04d8aac63b10e19411d869b8290600090a3600d80546001600160a01b0319166001600160a01b0392909216919091179055565b620008166001600160e01b0362000c2a16565b62000857576040805162461bcd60e51b8152602060048201819052602482015260008051602062005130833981519152604482015290519081900360640190fd5b600e546001600160a01b0382811691161415620008a65760405162461bcd60e51b8152600401808060200182810382526025815260200180620050e26025913960400191505060405180910390fd5b620008c5816001600160a01b031662000c5b60201b62002f9f1760201c565b62000917576040805162461bcd60e51b815260206004820152601d60248201527f4e657720626173652073686f756c64206265206120636f6e7472616374000000604482015290519081900360640190fd5b600e546040516001600160a01b038084169216907f1a60ded2578adf94e0523d41e22df9bccb7da384ab33deed06b6dccd6a9798a190600090a3600e80546001600160a01b0319166001600160a01b0392909216919091179055565b620009866001600160e01b0362000c2a16565b620009c7576040805162461bcd60e51b8152602060048201819052602482015260008051602062005130833981519152604482015290519081900360640190fd5b806040516020018082805190602001908083835b60208310620009fc5780518252601f199092019160209182019101620009db565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001206015604051602001808280546001816001161561010002031660029004801562000a9b5780601f1062000a7857610100808354040283529182019162000a9b565b820191906000526020600020905b81548152906001019060200180831162000a86575b505091505060405160208183030381529060405280519060200120141562000af55760405162461bcd60e51b81526004018080602001828103825260258152602001806200509c6025913960400191505060405180910390fd5b6040805181815260158054600260001961010060018416150201909116049282018390527fb8fdf10126d507f6daf46465ec25a2bbc08449cf6c944c98219264161391040a92909184918190602082019060608301908690801562000b9e5780601f1062000b725761010080835404028352916020019162000b9e565b820191906000526020600020905b81548152906001019060200180831162000b8057829003601f168201915b5050838103825284518152845160209182019186019080838360005b8381101562000bd457818101518382015260200162000bba565b50505050905090810190601f16801562000c025780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1805162000c2690601590602084019062000c98565b5050565b600c546000906001600160a01b031662000c4c6001600160e01b03620006a316565b6001600160a01b031614905090565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470811580159062000c905750808214155b949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000cdb57805160ff191683800117855562000d0b565b8280016001018555821562000d0b579182015b8281111562000d0b57825182559160200191906001019062000cee565b5062000d1992915062000d1d565b5090565b620006a591905b8082111562000d19576000815560010162000d24565b6143528062000d4a6000396000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c80636352211e11610182578063aeb8ce9b116100e9578063ca53db9d116100a2578063e985e9c51161007c578063e985e9c514610d6f578063ecc98ce414610d9d578063f2fde38b14610da5578063f6a74ed714610dcb576102bb565b8063ca53db9d14610d1b578063cf5ffeba14610d23578063da8c229e14610d49576102bb565b8063aeb8ce9b14610a46578063b88d4fde14610aea578063bef48ddf14610bae578063c28f48ce14610c52578063c2fb26a614610cf6578063c87b56dd14610cfe576102bb565b80638f32d59b1161013b5780638f32d59b14610921578063931688cb1461092957806395d89b41146109cd5780639d79d081146109d5578063a22cb465146109f2578063a7fc7a0714610a20576102bb565b80636352211e146108be5780636c0360eb146108db57806370a08231146108e3578063715018a6146109095780637b103999146109115780638da5cb5b14610919576102bb565b806328ed4f6c116102265780633f9e23e5116101df5780633f9e23e51461072757806342842e0e1461072f5780634e543b26146107655780634f6ccce71461078b5780635001f3b5146107a85780635b81eb88146107b0576102bb565b806328ed4f6c146106855780632c678c64146106b15780632dabbeed146106b95780632f745c59146106d65780633777d15914610702578063398b93d11461070a576102bb565b806318160ddd1161027857806318160ddd146104ec5780631a5da6c8146105065780631e59c5291461052c5780631e7663bc146105a357806323b872dd1461064757806324f093a41461067d576102bb565b806301ffc9a7146102c057806306fdde03146102fb578063081812fc14610378578063095ea7b3146103b157806311498b46146103df578063150b7a021461040b575b600080fd5b6102e7600480360360208110156102d657600080fd5b50356001600160e01b031916610df1565b604080519115158252519081900360200190f35b610303610e14565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561033d578181015183820152602001610325565b50505050905090810190601f16801561036a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103956004803603602081101561038e57600080fd5b5035610eab565b604080516001600160a01b039092168252519081900360200190f35b6103dd600480360360408110156103c757600080fd5b506001600160a01b038135169060200135610f0d565b005b6103dd600480360360408110156103f557600080fd5b506001600160a01b038135169060200135611035565b6104cf6004803603608081101561042157600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561045b57600080fd5b82018360208201111561046d57600080fd5b803590602001918460018302840111600160201b8311171561048e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611129945050505050565b604080516001600160e01b03199092168252519081900360200190f35b6104f46111f3565b60408051918252519081900360200190f35b6103dd6004803603602081101561051c57600080fd5b50356001600160a01b03166111f9565b6103dd6004803603604081101561054257600080fd5b810190602081018135600160201b81111561055c57600080fd5b82018360208201111561056e57600080fd5b803590602001918460018302840111600160201b8311171561058f57600080fd5b9193509150356001600160a01b0316611336565b6104f4600480360360208110156105b957600080fd5b810190602081018135600160201b8111156105d357600080fd5b8201836020820111156105e557600080fd5b803590602001918460018302840111600160201b8311171561060657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611537945050505050565b6103dd6004803603606081101561065d57600080fd5b506001600160a01b0381358116916020810135909116906040013561161a565b610303611676565b6103dd6004803603604081101561069b57600080fd5b50803590602001356001600160a01b0316611704565b6102e76117fc565b6103dd600480360360208110156106cf57600080fd5b5035611805565b6104f4600480360360408110156106ec57600080fd5b506001600160a01b0381351690602001356118d7565b6104f4611956565b6103dd6004803603602081101561072057600080fd5b503561195c565b6103dd611a3c565b6103dd6004803603606081101561074557600080fd5b506001600160a01b03813581169160208101359091169060400135611b13565b6103dd6004803603602081101561077b57600080fd5b50356001600160a01b0316611b2e565b6104f4600480360360208110156107a157600080fd5b5035611d45565b610395611dab565b6103dd600480360360608110156107c657600080fd5b810190602081018135600160201b8111156107e057600080fd5b8201836020820111156107f257600080fd5b803590602001918460208302840111600160201b8311171561081357600080fd5b919390929091602081019035600160201b81111561083057600080fd5b82018360208201111561084257600080fd5b803590602001918460208302840111600160201b8311171561086357600080fd5b919390929091602081019035600160201b81111561088057600080fd5b82018360208201111561089257600080fd5b803590602001918460208302840111600160201b831117156108b357600080fd5b509092509050611dba565b610395600480360360208110156108d457600080fd5b5035611f43565b610303611f9d565b6104f4600480360360208110156108f957600080fd5b50356001600160a01b0316611ff8565b6103dd612060565b6103956120f1565b610395612100565b6102e761210f565b6103dd6004803603602081101561093f57600080fd5b810190602081018135600160201b81111561095957600080fd5b82018360208201111561096b57600080fd5b803590602001918460018302840111600160201b8311171561098c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612135945050505050565b6103036123ce565b610303600480360360208110156109eb57600080fd5b503561242f565b6103dd60048036036040811015610a0857600080fd5b506001600160a01b0381351690602001351515612497565b6103dd60048036036020811015610a3657600080fd5b50356001600160a01b031661259c565b6102e760048036036020811015610a5c57600080fd5b810190602081018135600160201b811115610a7657600080fd5b820183602082011115610a8857600080fd5b803590602001918460018302840111600160201b83111715610aa957600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061269d945050505050565b6103dd60048036036080811015610b0057600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b811115610b3a57600080fd5b820183602082011115610b4c57600080fd5b803590602001918460018302840111600160201b83111715610b6d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612728945050505050565b61039560048036036020811015610bc457600080fd5b810190602081018135600160201b811115610bde57600080fd5b820183602082011115610bf057600080fd5b803590602001918460018302840111600160201b83111715610c1157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612780945050505050565b6103dd60048036036020811015610c6857600080fd5b810190602081018135600160201b811115610c8257600080fd5b820183602082011115610c9457600080fd5b803590602001918460018302840111600160201b83111715610cb557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612793945050505050565b610303612a62565b61030360048036036020811015610d1457600080fd5b5035612abd565b6104f4612c9d565b6103dd60048036036020811015610d3957600080fd5b50356001600160a01b0316612ca3565b6102e760048036036020811015610d5f57600080fd5b50356001600160a01b0316612df6565b6102e760048036036040811015610d8557600080fd5b506001600160a01b0381358116916020013516612e0b565b6104cf612e39565b6103dd60048036036020811015610dbb57600080fd5b50356001600160a01b0316612e44565b6103dd60048036036020811015610de157600080fd5b50356001600160a01b0316612e97565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ea05780601f10610e7557610100808354040283529160200191610ea0565b820191906000526020600020905b815481529060010190602001808311610e8357829003601f168201915b505050505090505b90565b6000610eb682612f7e565b610ef15760405162461bcd60e51b815260040180806020018281038252602c815260200180614156602c913960400191505060405180910390fd5b506000908152600260205260409020546001600160a01b031690565b6000610f1882611f43565b9050806001600160a01b0316836001600160a01b03161415610f6b5760405162461bcd60e51b81526004018080602001828103825260218152602001806141f46021913960400191505060405180910390fd5b806001600160a01b0316610f7d612f9b565b6001600160a01b03161480610f9e5750610f9e81610f99612f9b565b612e0b565b610fd95760405162461bcd60e51b815260040180806020018281038252603881526020018061405c6038913960400191505060405180910390fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61103d61210f565b61107c576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b600e54604080516323b872dd60e01b81523060048201526001600160a01b03858116602483015260448201859052915191909216916323b872dd91606480830192600092919082900301818387803b1580156110d757600080fd5b505af11580156110eb573d6000803e3d6000fd5b50506040518392506001600160a01b03851691507f8abf792cabfeedb418c98e537e6891e54301c260f8b7908300627771510054b190600090a35050565b600e546000906001600160a01b031633146111755760405162461bcd60e51b81526004018080602001828103825260288152602001806142986028913960400191505060405180910390fd5b600e5460408051630a3b53db60e21b81526004810186905230602482015290516001600160a01b03909216916328ed4f6c9160448082019260009290919082900301818387803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b50630a85bd0160e11b93505050505b949350505050565b60075490565b61120161210f565b611240576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b600d546001600160a01b038281169116141561128d5760405162461bcd60e51b815260040180806020018281038252602981526020018061412d6029913960400191505060405180910390fd5b61129f816001600160a01b0316612f9f565b6112da5760405162461bcd60e51b8152600401808060200182810382526021815260200180613faf6021913960400191505060405180910390fd5b600d546040516001600160a01b038084169216907f482b97c53e48ffa324a976e2738053e9aff6eee04d8aac63b10e19411d869b8290600090a3600d80546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600f602052604090205460ff166113845760405162461bcd60e51b81526004018080602001828103825260268152602001806142726026913960400191505060405180910390fd5b60165460ff166113db576040805162461bcd60e51b815260206004820152601e60248201527f546865206d6967726174696f6e20686173206e6f742066696e69736865640000604482015290519081900360640190fd5b6113e3612fd6565b600061142484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506131a392505050565b6040516020018082805190602001908083835b602083106114565780518252601f199092019160209182019101611437565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905061149c816132ca565b6114ed576040805162461bcd60e51b815260206004820152601760248201527f537562646f6d61696e20616c7265616479206f776e6564000000000000000000604482015290519081900360640190fd5b61153184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250869150429050613390565b50505050565b60006060611544836131a3565b90506000816040516020018082805190602001908083835b6020831061157b5780518252601f19909201916020918201910161155c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120905060008160001c90506115c981612f7e565b6111eb576040805162461bcd60e51b815260206004820152601f60248201527f54686520737562646f6d61696e206973206e6f74207265676973746572656400604482015290519081900360640190fd5b61162b611625612f9b565b826134f0565b6116665760405162461bcd60e51b81526004018080602001828103825260318152602001806142156031913960400191505060405180910390fd5b61167183838361358c565b505050565b6011805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156116fc5780601f106116d1576101008083540402835291602001916116fc565b820191906000526020600020905b8154815290600101906020018083116116df57829003601f168201915b505050505081565b61170e33836134f0565b6117495760405162461bcd60e51b815260040180806020018281038252603c8152602001806142e2603c913960400191505060405180910390fd5b600d54601454604080516306ab592360e01b81526004810192909252602482018590526001600160a01b03848116604484015290519216916306ab59239160648082019260009290919082900301818387803b1580156117a857600080fd5b505af11580156117bc573d6000803e3d6000fd5b50506040518492506001600160a01b038416915033907fc4cc5c1b6cf3b5cafd06bc7fa8b6320dbeea074c4f18c4c036e52a3a773aac5490600090a45050565b60165460ff1681565b336000908152600f602052604090205460ff166118535760405162461bcd60e51b81526004018080602001828103825260268152602001806142726026913960400191505060405180910390fd5b600061185e82611f43565b600d546014549192506001600160a01b0316906306ab5923908461188181611f43565b6040518463ffffffff1660e01b815260040180848152602001838152602001826001600160a01b03166001600160a01b031681526020019350505050600060405180830381600087803b1580156117a857600080fd5b60006118e283611ff8565b821061191f5760405162461bcd60e51b815260040180806020018281038252602b815260200180613f08602b913960400191505060405180910390fd5b6001600160a01b038316600090815260056020526040902080548390811061194357fe5b9060005260206000200154905092915050565b60135481565b61196461210f565b6119a3576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b600e5460408051630a3b53db60e21b81526004810184905230602482015290516001600160a01b03909216916328ed4f6c9160448082019260009290919082900301818387803b1580156119f657600080fd5b505af1158015611a0a573d6000803e3d6000fd5b50506040518392507f3a11d88ee5aca155d3f605ff73bba91616741610a8f88d51d2fa9da8c9a89dbd9150600090a250565b611a4461210f565b611a83576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b60165460ff1615611adb576040805162461bcd60e51b815260206004820152601a60248201527f546865206d6967726174696f6e206861732066696e6973686564000000000000604482015290519081900360640190fd5b6016805460ff191660011790556040517fceab6b91af27f4253aa8bd4ee8179c32d60bede7297c333dcb56de2641c0554490600090a1565b61167183838360405180602001604052806000815250612728565b611b3661210f565b611b75576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b600d5460145460408051630178b8bf60e01b81526004810192909252516000926001600160a01b031691630178b8bf916024808301926020929190829003018186803b158015611bc457600080fd5b505afa158015611bd8573d6000803e3d6000fd5b505050506040513d6020811015611bee57600080fd5b50519050611c046001600160a01b038316612f9f565b611c3f5760405162461bcd60e51b81526004018080602001828103825260218152602001806140946021913960400191505060405180910390fd5b806001600160a01b0316826001600160a01b03161415611c905760405162461bcd60e51b81526004018080602001828103825260298152602001806141826029913960400191505060405180910390fd5b611c99826135ab565b600d5460145460408051630c4b7b8560e11b815260048101929092526001600160a01b0385811660248401529051921691631896f70a9160448082019260009290919082900301818387803b158015611cf157600080fd5b505af1158015611d05573d6000803e3d6000fd5b50506040516001600160a01b038086169350841691507f84b83d2b66cac119ccaaca68b476b0dc5371d5f2fd27f697770a910175fd38b690600090a35050565b6000611d4f6111f3565b8210611d8c5760405162461bcd60e51b815260040180806020018281038252602c815260200180614246602c913960400191505060405180910390fd5b60078281548110611d9957fe5b90600052602060002001549050919050565b600e546001600160a01b031681565b611dc261210f565b611e01576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b60165460ff1615611e59576040805162461bcd60e51b815260206004820152601a60248201527f546865206d6967726174696f6e206861732066696e6973686564000000000000604482015290519081900360640190fd5b60005b85811015611f3a576060611e81888884818110611e7557fe5b9050602002013561362f565b9050611f3181611e90836131a3565b6040516020018082805190602001908083835b60208310611ec25780518252601f199092019160209182019101611ea3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120888886818110611f0957fe5b905060200201356001600160a01b0316878787818110611f2557fe5b90506020020135613390565b50600101611e5c565b50505050505050565b6000818152600160205260408120546001600160a01b031680611f975760405162461bcd60e51b81526004018080602001828103825260298152602001806140df6029913960400191505060405180910390fd5b92915050565b6015805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156116fc5780601f106116d1576101008083540402835291602001916116fc565b60006001600160a01b03821661203f5760405162461bcd60e51b815260040180806020018281038252602a8152602001806140b5602a913960400191505060405180910390fd5b6001600160a01b0382166000908152600360205260409020611f97906136a4565b61206861210f565b6120a7576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b600c546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600c80546001600160a01b0319169055565b600d546001600160a01b031681565b600c546001600160a01b031690565b600c546000906001600160a01b0316612126612f9b565b6001600160a01b031614905090565b61213d61210f565b61217c576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b806040516020018082805190602001908083835b602083106121af5780518252601f199092019160209182019101612190565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001206015604051602001808280546001816001161561010002031660029004801561224a5780601f1061222857610100808354040283529182019161224a565b820191906000526020600020905b815481529060010190602001808311612236575b50509150506040516020818303038152906040528051906020012014156122a25760405162461bcd60e51b8152600401808060200182810382526025815260200180613ee36025913960400191505060405180910390fd5b6040805181815260158054600260001961010060018416150201909116049282018390527fb8fdf10126d507f6daf46465ec25a2bbc08449cf6c944c98219264161391040a9290918491819060208201906060830190869080156123475780601f1061231c57610100808354040283529160200191612347565b820191906000526020600020905b81548152906001019060200180831161232a57829003601f168201915b5050838103825284518152845160209182019186019080838360005b8381101561237b578181015183820152602001612363565b50505050905090810190601f1680156123a85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a180516123ca906015906020840190613e2a565b5050565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ea05780601f10610e7557610100808354040283529160200191610ea0565b60176020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156116fc5780601f106116d1576101008083540402835291602001916116fc565b61249f612f9b565b6001600160a01b0316826001600160a01b03161415612505576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060046000612512612f9b565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155612556612f9b565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b6125a461210f565b6125e3576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b6001600160a01b0381166000908152600f602052604090205460ff1615612651576040805162461bcd60e51b815260206004820181905260248201527f54686520636f6e74726f6c6c65722077617320616c7265616479206164646564604482015290519081900360640190fd5b6001600160a01b0381166000818152600f6020526040808220805460ff19166001179055517f0a8bb31534c0ed46f380cb867bd5c803a189ced9a764e30b3a4991a9901d74749190a250565b6000806126a9836131a3565b6040516020018082805190602001908083835b602083106126db5780518252601f1990920191602091820191016126bc565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050612721816132ca565b9392505050565b612739612733612f9b565b836134f0565b6127745760405162461bcd60e51b81526004018080602001828103825260318152602001806142156031913960400191505060405180910390fd5b611531848484846136a8565b6000611f9761278e83611537565b611f43565b61279b61210f565b6127da576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b600d5460145460408051630178b8bf60e01b81526004810192909252516000926001600160a01b031691630178b8bf916024808301926020929190829003018186803b15801561282957600080fd5b505afa15801561283d573d6000803e3d6000fd5b505050506040513d602081101561285357600080fd5b50519050612860816135ab565b60006060826001600160a01b0316846040518082805190602001908083835b6020831061289e5780518252601f19909201916020918201910161287f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612900576040519150601f19603f3d011682016040523d82523d6000602084013e612905565b606091505b50915091508161294a576040805162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b604482015290519081900360640190fd5b612952612fd6565b826001600160a01b03167f3a321a1276dce90a83e15ae23e7fa1d89b4b71bfcdd5db994f1a1324bbab4dd48583604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156129c05781810151838201526020016129a8565b50505050905090810190601f1680156129ed5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015612a20578181015183820152602001612a08565b50505050905090810190601f168015612a4d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a250505050565b6012805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156116fc5780601f106116d1576101008083540402835291602001916116fc565b60155460609060026000196101006001841615020190911604612aef5750604080516020810190915260008152610e0f565b612af882612f7e565b612b335760405162461bcd60e51b815260040180806020018281038252603c815260200180613ff4603c913960400191505060405180910390fd5b6000828152601760209081526040918290208054835160026001831615610100026000190190921691909104601f8101849004840282018401909452838152601593612bd793919291830182828015612bcd5780601f10612ba257610100808354040283529160200191612bcd565b820191906000526020600020905b815481529060010190602001808311612bb057829003601f168201915b50505050506131a3565b6040516020018083805460018160011615610100020316600290048015612c355780601f10612c13576101008083540402835291820191612c35565b820191906000526020600020905b815481529060010190602001808311612c21575b5050825160208401908083835b60208310612c615780518252601f199092019160209182019101612c42565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529050919050565b60145481565b612cab61210f565b612cea576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b600e546001600160a01b0382811691161415612d375760405162461bcd60e51b81526004018080602001828103825260258152602001806141086025913960400191505060405180910390fd5b612d49816001600160a01b0316612f9f565b612d9a576040805162461bcd60e51b815260206004820152601d60248201527f4e657720626173652073686f756c64206265206120636f6e7472616374000000604482015290519081900360640190fd5b600e546040516001600160a01b038084169216907f1a60ded2578adf94e0523d41e22df9bccb7da384ab33deed06b6dccd6a9798a190600090a3600e80546001600160a01b0319166001600160a01b0392909216919091179055565b600f6020526000908152604090205460ff1681565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b630a85bd0160e11b81565b612e4c61210f565b612e8b576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b612e94816136fa565b50565b612e9f61210f565b612ede576040805162461bcd60e51b815260206004820181905260248201526000805160206141ab833981519152604482015290519081900360640190fd5b6001600160a01b0381166000908152600f602052604090205460ff16612f355760405162461bcd60e51b81526004018080602001828103825260228152602001806142c06022913960400191505060405180910390fd5b6001600160a01b0381166000818152600f6020526040808220805460ff19169055517f33d83959be2573f5453b12eb9d43b3499bc57d96bd2f067ba44803c859e811139190a250565b6000908152600160205260409020546001600160a01b0316151590565b3390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081158015906111eb5750141592915050565b600d54601454604080516302571be360e01b815260048101929092525130926001600160a01b0316916302571be3916024808301926020929190829003018186803b15801561302457600080fd5b505afa158015613038573d6000803e3d6000fd5b505050506040513d602081101561304e57600080fd5b50516001600160a01b03161480156131665750600e546040516012805430936001600160a01b031692636352211e9291602090910190819083906002600019600183161561010002019091160480156130de5780601f106130bc5761010080835404028352918201916130de565b820191906000526020600020905b8154815290600101906020018083116130ca575b505060408051601f1981840301815282825280516020918201206001600160e01b031960e088901b168452600484015290516024808401955091935091829003018186803b15801561312f57600080fd5b505afa158015613143573d6000803e3d6000fd5b505050506040513d602081101561315957600080fd5b50516001600160a01b0316145b6131a15760405162461bcd60e51b8152600401808060200182810382526024815260200180613f8b6024913960400191505060405180910390fd5b565b606080829050606081516040519080825280601f01601f1916602001820160405280156131d7576020820181803883390190505b50905060005b82518110156132c257604160f81b8382815181106131f757fe5b01602001516001600160f81b031916108015906132325750605a60f81b83828151811061322057fe5b01602001516001600160f81b03191611155b1561327f5782818151811061324357fe5b602001015160f81c60f81b60f81c60200160f81b82828151811061326357fe5b60200101906001600160f81b031916908160001a9053506132ba565b82818151811061328b57fe5b602001015160f81c60f81b8282815181106132a257fe5b60200101906001600160f81b031916908160001a9053505b6001016131dd565b509392505050565b6014546040805160208082019390935280820184905281518082038301815260608201808452815191850191909120600d546302571be360e01b90925260648301819052925160009485936001600160a01b03909316926302571be39260848083019392829003018186803b15801561334257600080fd5b505afa158015613356573d6000803e3d6000fd5b505050506040513d602081101561336c57600080fd5b50516001600160a01b0316148015612721575061338883612f7e565b159392505050565b600d54601454604080516306ab592360e01b81526004810192909252602482018690526001600160a01b03858116604484015290519216916306ab59239160648082019260009290919082900301818387803b1580156133ef57600080fd5b505af1158015613403573d6000803e3d6000fd5b50505050613414828460001c61379b565b6000838152601760209081526040909120855161343392870190613e2a565b5082826001600160a01b0316336001600160a01b03167f570313dae523ecb48b1176a4b60272e5ea7ec637f5b2d09983cbc4bf25e7e9e387856040518080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156134af578181015183820152602001613497565b50505050905090810190601f1680156134dc5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a450505050565b60006134fb82612f7e565b6135365760405162461bcd60e51b815260040180806020018281038252602c815260200180614030602c913960400191505060405180910390fd5b600061354183611f43565b9050806001600160a01b0316846001600160a01b0316148061357c5750836001600160a01b031661357184610eab565b6001600160a01b0316145b806111eb57506111eb8185612e0b565b6135978383836137b8565b6135a183826138fc565b61167182826139f1565b600e546001600160a01b038281169116148015906135d75750600d546001600160a01b03828116911614155b80156135ec57506001600160a01b0381163014155b612e94576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b60606000805b61010081116136655783811b6001600160f81b031981166136565750613665565b50600190910190600801613635565b506060816040519080825280601f01601f191660200182016040528015613693576020820181803883390190505b506020810185905292505050919050565b5490565b6136b384848461358c565b6136bf84848484613a2f565b6115315760405162461bcd60e51b8152600401808060200182810382526032815260200180613f336032913960400191505060405180910390fd5b6001600160a01b03811661373f5760405162461bcd60e51b8152600401808060200182810382526026815260200180613f656026913960400191505060405180910390fd5b600c546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6137a58282613b86565b6137af82826139f1565b6123ca81613cb7565b826001600160a01b03166137cb82611f43565b6001600160a01b0316146138105760405162461bcd60e51b81526004018080602001828103825260298152602001806141cb6029913960400191505060405180910390fd5b6001600160a01b0382166138555760405162461bcd60e51b8152600401808060200182810382526024815260200180613fd06024913960400191505060405180910390fd5b61385e81613cfb565b6001600160a01b038316600090815260036020526040902061387f90613d36565b6001600160a01b03821660009081526003602052604090206138a090613d4d565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b03821660009081526005602052604081205461392690600163ffffffff613d5616565b6000838152600660205260409020549091508082146139c1576001600160a01b038416600090815260056020526040812080548490811061396357fe5b906000526020600020015490508060056000876001600160a01b03166001600160a01b0316815260200190815260200160002083815481106139a157fe5b600091825260208083209091019290925591825260069052604090208190555b6001600160a01b03841660009081526005602052604090208054906139ea906000198301613ea8565b5050505050565b6001600160a01b0390911660009081526005602081815260408084208054868652600684529185208290559282526001810183559183529091200155565b6000613a43846001600160a01b0316612f9f565b613a4f575060016111eb565b6000846001600160a01b031663150b7a02613a68612f9b565b8887876040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613aed578181015183820152602001613ad5565b50505050905090810190601f168015613b1a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015613b3c57600080fd5b505af1158015613b50573d6000803e3d6000fd5b505050506040513d6020811015613b6657600080fd5b50516001600160e01b031916630a85bd0160e11b14915050949350505050565b6001600160a01b038216613be1576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b613bea81612f7e565b15613c3c576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b600081815260016020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835260039091529020613c7b90613d4d565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600780546000838152600860205260408120829055600182018355919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880155565b6000818152600260205260409020546001600160a01b031615612e9457600090815260026020526040902080546001600160a01b0319169055565b8054613d4990600163ffffffff613d5616565b9055565b80546001019055565b600061272183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060008184841115613e225760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613de7578181015183820152602001613dcf565b50505050905090810190601f168015613e145780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613e6b57805160ff1916838001178555613e98565b82800160010185558215613e98579182015b82811115613e98578251825591602001919060010190613e7d565b50613ea4929150613ec8565b5090565b815481835581811115611671576000838152602090206116719181019083015b610ea891905b80821115613ea45760008155600101613ece56fe42617365205552492073686f756c6420626520646966666572656e742066726f6d206f6c64455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737354686520636f6e747261637420646f6573206e6f74206f776e2074686520646f6d61696e4e65772072656769737472792073686f756c64206265206120636f6e74726163744552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732314d657461646174613a20726563656976656420612055524920717565727920666f722061206e6f6e6578697374656e7420746f6b656e4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4e6577207265736f6c7665722073686f756c64206265206120636f6e74726163744552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4e657720626173652073686f756c6420626520646966666572656e742066726f6d206f6c644e65772072656769737472792073686f756c6420626520646966666572656e742066726f6d206f6c644552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4e6577207265736f6c7665722073686f756c6420626520646966666572656e742066726f6d206f6c644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e64734f6e6c79206120636f6e74726f6c6c65722063616e2063616c6c2074686973206d6574686f644f6e6c7920626173652063616e2073656e64204e46547320746f207468697320636f6e747261637454686520636f6e74726f6c6c657220697320616c72656164792064697361626c65644f6e6c7920616e20617574686f72697a6564206163636f756e742063616e206368616e67652074686520737562646f6d61696e2073657474696e6773a265627a7a72315820c9d75532de21a69bfa4d624f197516342a202a8a7b0de4b21c46f49e9262efc164736f6c6343000510003242617365205552492073686f756c6420626520646966666572656e742066726f6d206f6c644e65772072656769737472792073686f756c64206265206120636f6e74726163744e657720626173652073686f756c6420626520646966666572656e742066726f6d206f6c644e65772072656769737472792073686f756c6420626520646966666572656e742066726f6d206f6c644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572000000000000000000000000e65a747748eb0e869c048f3758317cad516b539a000000000000000000000000987ae5e1e469eaabb81afd5d80cc60d1867bcd8700000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000365746800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003646373000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016500000000000000000000000000000000000000000000000000000000000000";

    public static final String FUNC_ERC721_RECEIVED = "ERC721_RECEIVED";

    public static final String FUNC_ADDCONTROLLER = "addController";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_AVAILABLE = "available";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASE = "base";

    public static final String FUNC_BASEURI = "baseURI";

    public static final String FUNC_CONTROLLERS = "controllers";

    public static final String FUNC_DOMAIN = "domain";

    public static final String FUNC_DOMAINNAMEHASH = "domainNameHash";

    public static final String FUNC_FORWARDTORESOLVER = "forwardToResolver";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETOWNEROF = "getOwnerOf";

    public static final String FUNC_GETTOKENID = "getTokenId";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_MIGRATENAMES = "migrateNames";

    public static final String FUNC_MIGRATED = "migrated";

    public static final String FUNC_MIGRATIONFINISHED = "migrationFinished";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_reclaim = "reclaim";

    public static final String FUNC_RECLAIMDOMAIN = "reclaimDomain";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_REMOVECONTROLLER = "removeController";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETRESOLVER = "setResolver";

    public static final String FUNC_SUBDOMAINS = "subdomains";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOPDOMAIN = "topdomain";

    public static final String FUNC_TOPDOMAINNAMEHASH = "topdomainNameHash";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERDOMAINOWNERSHIP = "transferDomainOwnership";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEBASE = "updateBase";

    public static final String FUNC_UPDATEBASEURI = "updateBaseURI";

    public static final String FUNC_UPDATEREGISTRY = "updateRegistry";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BASEURI_EVENT = new Event("BaseURI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event BASEUPDATED_EVENT = new Event("BaseUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event CALLFORWARWEDTORESOLVER_EVENT = new Event("CallForwarwedToResolver", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event CONTROLLERADDED_EVENT = new Event("ControllerAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event CONTROLLERREMOVED_EVENT = new Event("ControllerRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event DOMAINRECLAIMED_EVENT = new Event("DomainReclaimed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}));
    ;

    public static final Event DOMAINTRANSFERRED_EVENT = new Event("DomainTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event MIGRATIONFINISHED_EVENT = new Event("MigrationFinished", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event NAMEREGISTERED_EVENT = new Event("NameRegistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RECLAIMED_EVENT = new Event("Reclaimed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event REGISTRYUPDATED_EVENT = new Event("RegistryUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RESOLVERUPDATED_EVENT = new Event("ResolverUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected DCLRegistrar(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DCLRegistrar(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DCLRegistrar(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DCLRegistrar(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<BaseURIEventResponse> getBaseURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BASEURI_EVENT, transactionReceipt);
        ArrayList<BaseURIEventResponse> responses = new ArrayList<BaseURIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BaseURIEventResponse typedResponse = new BaseURIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._oldBaseURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._newBaseURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BaseURIEventResponse> baseURIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BaseURIEventResponse>() {
            @Override
            public BaseURIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BASEURI_EVENT, log);
                BaseURIEventResponse typedResponse = new BaseURIEventResponse();
                typedResponse.log = log;
                typedResponse._oldBaseURI = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._newBaseURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BaseURIEventResponse> baseURIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BASEURI_EVENT));
        return baseURIEventFlowable(filter);
    }

    public List<BaseUpdatedEventResponse> getBaseUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BASEUPDATED_EVENT, transactionReceipt);
        ArrayList<BaseUpdatedEventResponse> responses = new ArrayList<BaseUpdatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BaseUpdatedEventResponse typedResponse = new BaseUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._previousBase = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._newBase = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BaseUpdatedEventResponse> baseUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BaseUpdatedEventResponse>() {
            @Override
            public BaseUpdatedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BASEUPDATED_EVENT, log);
                BaseUpdatedEventResponse typedResponse = new BaseUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse._previousBase = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._newBase = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BaseUpdatedEventResponse> baseUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BASEUPDATED_EVENT));
        return baseUpdatedEventFlowable(filter);
    }

    public List<CallForwarwedToResolverEventResponse> getCallForwarwedToResolverEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CALLFORWARWEDTORESOLVER_EVENT, transactionReceipt);
        ArrayList<CallForwarwedToResolverEventResponse> responses = new ArrayList<CallForwarwedToResolverEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CallForwarwedToResolverEventResponse typedResponse = new CallForwarwedToResolverEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._resolver = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._data = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.res = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CallForwarwedToResolverEventResponse> callForwarwedToResolverEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CallForwarwedToResolverEventResponse>() {
            @Override
            public CallForwarwedToResolverEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CALLFORWARWEDTORESOLVER_EVENT, log);
                CallForwarwedToResolverEventResponse typedResponse = new CallForwarwedToResolverEventResponse();
                typedResponse.log = log;
                typedResponse._resolver = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._data = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.res = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CallForwarwedToResolverEventResponse> callForwarwedToResolverEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALLFORWARWEDTORESOLVER_EVENT));
        return callForwarwedToResolverEventFlowable(filter);
    }

    public List<ControllerAddedEventResponse> getControllerAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CONTROLLERADDED_EVENT, transactionReceipt);
        ArrayList<ControllerAddedEventResponse> responses = new ArrayList<ControllerAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ControllerAddedEventResponse typedResponse = new ControllerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._controller = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ControllerAddedEventResponse> controllerAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ControllerAddedEventResponse>() {
            @Override
            public ControllerAddedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CONTROLLERADDED_EVENT, log);
                ControllerAddedEventResponse typedResponse = new ControllerAddedEventResponse();
                typedResponse.log = log;
                typedResponse._controller = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ControllerAddedEventResponse> controllerAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONTROLLERADDED_EVENT));
        return controllerAddedEventFlowable(filter);
    }

    public List<ControllerRemovedEventResponse> getControllerRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CONTROLLERREMOVED_EVENT, transactionReceipt);
        ArrayList<ControllerRemovedEventResponse> responses = new ArrayList<ControllerRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ControllerRemovedEventResponse typedResponse = new ControllerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._controller = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ControllerRemovedEventResponse> controllerRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ControllerRemovedEventResponse>() {
            @Override
            public ControllerRemovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CONTROLLERREMOVED_EVENT, log);
                ControllerRemovedEventResponse typedResponse = new ControllerRemovedEventResponse();
                typedResponse.log = log;
                typedResponse._controller = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ControllerRemovedEventResponse> controllerRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONTROLLERREMOVED_EVENT));
        return controllerRemovedEventFlowable(filter);
    }

    public List<DomainReclaimedEventResponse> getDomainReclaimedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DOMAINRECLAIMED_EVENT, transactionReceipt);
        ArrayList<DomainReclaimedEventResponse> responses = new ArrayList<DomainReclaimedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DomainReclaimedEventResponse typedResponse = new DomainReclaimedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DomainReclaimedEventResponse> domainReclaimedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DomainReclaimedEventResponse>() {
            @Override
            public DomainReclaimedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DOMAINRECLAIMED_EVENT, log);
                DomainReclaimedEventResponse typedResponse = new DomainReclaimedEventResponse();
                typedResponse.log = log;
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DomainReclaimedEventResponse> domainReclaimedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DOMAINRECLAIMED_EVENT));
        return domainReclaimedEventFlowable(filter);
    }

    public List<DomainTransferredEventResponse> getDomainTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DOMAINTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<DomainTransferredEventResponse> responses = new ArrayList<DomainTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DomainTransferredEventResponse typedResponse = new DomainTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._newOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DomainTransferredEventResponse> domainTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DomainTransferredEventResponse>() {
            @Override
            public DomainTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DOMAINTRANSFERRED_EVENT, log);
                DomainTransferredEventResponse typedResponse = new DomainTransferredEventResponse();
                typedResponse.log = log;
                typedResponse._newOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DomainTransferredEventResponse> domainTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DOMAINTRANSFERRED_EVENT));
        return domainTransferredEventFlowable(filter);
    }

    public List<MigrationFinishedEventResponse> getMigrationFinishedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MIGRATIONFINISHED_EVENT, transactionReceipt);
        ArrayList<MigrationFinishedEventResponse> responses = new ArrayList<MigrationFinishedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MigrationFinishedEventResponse typedResponse = new MigrationFinishedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MigrationFinishedEventResponse> migrationFinishedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MigrationFinishedEventResponse>() {
            @Override
            public MigrationFinishedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MIGRATIONFINISHED_EVENT, log);
                MigrationFinishedEventResponse typedResponse = new MigrationFinishedEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<MigrationFinishedEventResponse> migrationFinishedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MIGRATIONFINISHED_EVENT));
        return migrationFinishedEventFlowable(filter);
    }

    public List<NameRegisteredEventResponse> getNameRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NAMEREGISTERED_EVENT, transactionReceipt);
        ArrayList<NameRegisteredEventResponse> responses = new ArrayList<NameRegisteredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NameRegisteredEventResponse typedResponse = new NameRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._caller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._beneficiary = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._labelHash = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._subdomain = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._createdDate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NameRegisteredEventResponse> nameRegisteredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NameRegisteredEventResponse>() {
            @Override
            public NameRegisteredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NAMEREGISTERED_EVENT, log);
                NameRegisteredEventResponse typedResponse = new NameRegisteredEventResponse();
                typedResponse.log = log;
                typedResponse._caller = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._beneficiary = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._labelHash = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._subdomain = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._createdDate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NameRegisteredEventResponse> nameRegisteredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NAMEREGISTERED_EVENT));
        return nameRegisteredEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<ReclaimedEventResponse> getReclaimedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RECLAIMED_EVENT, transactionReceipt);
        ArrayList<ReclaimedEventResponse> responses = new ArrayList<ReclaimedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReclaimedEventResponse typedResponse = new ReclaimedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._caller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReclaimedEventResponse> reclaimedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReclaimedEventResponse>() {
            @Override
            public ReclaimedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RECLAIMED_EVENT, log);
                ReclaimedEventResponse typedResponse = new ReclaimedEventResponse();
                typedResponse.log = log;
                typedResponse._caller = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._owner = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReclaimedEventResponse> reclaimedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECLAIMED_EVENT));
        return reclaimedEventFlowable(filter);
    }

    public List<RegistryUpdatedEventResponse> getRegistryUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTRYUPDATED_EVENT, transactionReceipt);
        ArrayList<RegistryUpdatedEventResponse> responses = new ArrayList<RegistryUpdatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegistryUpdatedEventResponse typedResponse = new RegistryUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._previousRegistry = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._newRegistry = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegistryUpdatedEventResponse> registryUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RegistryUpdatedEventResponse>() {
            @Override
            public RegistryUpdatedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REGISTRYUPDATED_EVENT, log);
                RegistryUpdatedEventResponse typedResponse = new RegistryUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse._previousRegistry = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._newRegistry = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RegistryUpdatedEventResponse> registryUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTRYUPDATED_EVENT));
        return registryUpdatedEventFlowable(filter);
    }

    public List<ResolverUpdatedEventResponse> getResolverUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RESOLVERUPDATED_EVENT, transactionReceipt);
        ArrayList<ResolverUpdatedEventResponse> responses = new ArrayList<ResolverUpdatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ResolverUpdatedEventResponse typedResponse = new ResolverUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._oldResolver = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._newResolver = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ResolverUpdatedEventResponse> resolverUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ResolverUpdatedEventResponse>() {
            @Override
            public ResolverUpdatedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RESOLVERUPDATED_EVENT, log);
                ResolverUpdatedEventResponse typedResponse = new ResolverUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse._oldResolver = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._newResolver = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ResolverUpdatedEventResponse> resolverUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESOLVERUPDATED_EVENT));
        return resolverUpdatedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> ERC721_RECEIVED() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ERC721_RECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> addController(String controller) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDCONTROLLER, 
                Arrays.<Type>asList(new Address(160, controller)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> available(String _subdomain) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AVAILABLE, 
                Arrays.<Type>asList(new Utf8String(_subdomain)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> base() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> baseURI() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASEURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> controllers(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTROLLERS, 
                Arrays.<Type>asList(new Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> domain() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> domainNameHash() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DOMAINNAMEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> forwardToResolver(byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FORWARDTORESOLVER, 
                Arrays.<Type>asList(new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getOwnerOf(String _subdomain) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOWNEROF, 
                Arrays.<Type>asList(new Utf8String(_subdomain)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getTokenId(String _subdomain) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENID, 
                Arrays.<Type>asList(new Utf8String(_subdomain)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(160, owner),
                new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> migrateNames(List<byte[]> _names, List<String> _beneficiaries, List<BigInteger> _createdDates) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MIGRATENAMES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_names, Bytes32.class)),
                new org.web3j.abi.datatypes.DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(_beneficiaries, Address.class)),
                new org.web3j.abi.datatypes.DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(_createdDates, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> migrated() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MIGRATED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> migrationFinished() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MIGRATIONFINISHED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> onERC721Received(String param0, String param1, BigInteger _tokenId, byte[] param3) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(new Address(160, param0),
                new Address(160, param1),
                new Uint256(_tokenId),
                new DynamicBytes(param3)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> reclaim(BigInteger _tokenId, String _owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_reclaim, 
                Arrays.<Type>asList(new Uint256(_tokenId),
                new Address(160, _owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reclaim(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_reclaim, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reclaimDomain(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RECLAIMDOMAIN, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> register(String _subdomain, String _beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(_subdomain),
                new Address(160, _beneficiary)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> registry() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REGISTRY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeController(String controller) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVECONTROLLER, 
                Arrays.<Type>asList(new Address(160, controller)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId),
                new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String to, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(160, to),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setResolver(String _resolver) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETRESOLVER, 
                Arrays.<Type>asList(new Address(160, _resolver)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> subdomains(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUBDOMAINS, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new Address(160, owner),
                new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> topdomain() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOPDOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> topdomainNameHash() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOPDOMAINNAMEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferDomainOwnership(String _owner, BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERDOMAINOWNERSHIP, 
                Arrays.<Type>asList(new Address(160, _owner),
                new Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateBase(String _base) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEBASE, 
                Arrays.<Type>asList(new Address(160, _base)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateBaseURI(String _baseURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEBASEURI, 
                Arrays.<Type>asList(new Utf8String(_baseURI)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRegistry(String _registry) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEREGISTRY, 
                Arrays.<Type>asList(new Address(160, _registry)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DCLRegistrar load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DCLRegistrar(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DCLRegistrar load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DCLRegistrar(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DCLRegistrar load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DCLRegistrar(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DCLRegistrar load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DCLRegistrar(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DCLRegistrar> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _registry, String _base, String _topdomain, String _domain, String _baseURI) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _registry),
                new Address(160, _base),
                new Utf8String(_topdomain),
                new Utf8String(_domain),
                new Utf8String(_baseURI)));
        return deployRemoteCall(DCLRegistrar.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DCLRegistrar> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _registry, String _base, String _topdomain, String _domain, String _baseURI) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _registry),
                new Address(160, _base),
                new Utf8String(_topdomain),
                new Utf8String(_domain),
                new Utf8String(_baseURI)));
        return deployRemoteCall(DCLRegistrar.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DCLRegistrar> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _registry, String _base, String _topdomain, String _domain, String _baseURI) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _registry),
                new Address(160, _base),
                new Utf8String(_topdomain),
                new Utf8String(_domain),
                new Utf8String(_baseURI)));
        return deployRemoteCall(DCLRegistrar.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DCLRegistrar> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _registry, String _base, String _topdomain, String _domain, String _baseURI) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _registry),
                new Address(160, _base),
                new Utf8String(_topdomain),
                new Utf8String(_domain),
                new Utf8String(_baseURI)));
        return deployRemoteCall(DCLRegistrar.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BaseURIEventResponse extends BaseEventResponse {
        public String _oldBaseURI;

        public String _newBaseURI;
    }

    public static class BaseUpdatedEventResponse extends BaseEventResponse {
        public String _previousBase;

        public String _newBase;
    }

    public static class CallForwarwedToResolverEventResponse extends BaseEventResponse {
        public String _resolver;

        public byte[] _data;

        public byte[] res;
    }

    public static class ControllerAddedEventResponse extends BaseEventResponse {
        public String _controller;
    }

    public static class ControllerRemovedEventResponse extends BaseEventResponse {
        public String _controller;
    }

    public static class DomainReclaimedEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class DomainTransferredEventResponse extends BaseEventResponse {
        public String _newOwner;

        public BigInteger _tokenId;
    }

    public static class MigrationFinishedEventResponse extends BaseEventResponse {
    }

    public static class NameRegisteredEventResponse extends BaseEventResponse {
        public String _caller;

        public String _beneficiary;

        public byte[] _labelHash;

        public String _subdomain;

        public BigInteger _createdDate;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class ReclaimedEventResponse extends BaseEventResponse {
        public String _caller;

        public String _owner;

        public BigInteger _tokenId;
    }

    public static class RegistryUpdatedEventResponse extends BaseEventResponse {
        public String _previousRegistry;

        public String _newRegistry;
    }

    public static class ResolverUpdatedEventResponse extends BaseEventResponse {
        public String _oldResolver;

        public String _newResolver;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
